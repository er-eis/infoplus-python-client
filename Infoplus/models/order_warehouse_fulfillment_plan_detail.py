# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OrderWarehouseFulfillmentPlanDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OrderWarehouseFulfillmentPlanDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'warehouse_id': 'int',
            'carrier_code': 'int',
            'line_item_list': 'list[str]'
        }

        self.attribute_map = {
            'warehouse_id': 'warehouseId',
            'carrier_code': 'carrierCode',
            'line_item_list': 'lineItemList'
        }

        self._warehouse_id = None
        self._carrier_code = None
        self._line_item_list = None

    @property
    def warehouse_id(self):
        """
        Gets the warehouse_id of this OrderWarehouseFulfillmentPlanDetail.


        :return: The warehouse_id of this OrderWarehouseFulfillmentPlanDetail.
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """
        Sets the warehouse_id of this OrderWarehouseFulfillmentPlanDetail.


        :param warehouse_id: The warehouse_id of this OrderWarehouseFulfillmentPlanDetail.
        :type: int
        """
        self._warehouse_id = warehouse_id

    @property
    def carrier_code(self):
        """
        Gets the carrier_code of this OrderWarehouseFulfillmentPlanDetail.


        :return: The carrier_code of this OrderWarehouseFulfillmentPlanDetail.
        :rtype: int
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """
        Sets the carrier_code of this OrderWarehouseFulfillmentPlanDetail.


        :param carrier_code: The carrier_code of this OrderWarehouseFulfillmentPlanDetail.
        :type: int
        """
        self._carrier_code = carrier_code

    @property
    def line_item_list(self):
        """
        Gets the line_item_list of this OrderWarehouseFulfillmentPlanDetail.


        :return: The line_item_list of this OrderWarehouseFulfillmentPlanDetail.
        :rtype: list[str]
        """
        return self._line_item_list

    @line_item_list.setter
    def line_item_list(self, line_item_list):
        """
        Sets the line_item_list of this OrderWarehouseFulfillmentPlanDetail.


        :param line_item_list: The line_item_list of this OrderWarehouseFulfillmentPlanDetail.
        :type: list[str]
        """
        self._line_item_list = line_item_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

