# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CustomerInvoiceTemplateLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CustomerInvoiceTemplateLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'create_date': 'datetime',
            'modify_date': 'datetime',
            'lob_id': 'int',
            'description': 'str',
            'seq_no': 'int',
            'account_code': 'str',
            'active': 'bool',
            'include_if_zero': 'bool',
            'department': 'str',
            'item_code': 'str',
            'invoice_template_id': 'int',
            'billing_rule_id': 'int',
            'price_level_mode': 'str',
            'script_id': 'int',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'create_date': 'createDate',
            'modify_date': 'modifyDate',
            'lob_id': 'lobId',
            'description': 'description',
            'seq_no': 'seqNo',
            'account_code': 'accountCode',
            'active': 'active',
            'include_if_zero': 'includeIfZero',
            'department': 'department',
            'item_code': 'itemCode',
            'invoice_template_id': 'invoiceTemplateId',
            'billing_rule_id': 'billingRuleId',
            'price_level_mode': 'priceLevelMode',
            'script_id': 'scriptId',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._create_date = None
        self._modify_date = None
        self._lob_id = None
        self._description = None
        self._seq_no = None
        self._account_code = None
        self._active = False
        self._include_if_zero = False
        self._department = None
        self._item_code = None
        self._invoice_template_id = None
        self._billing_rule_id = None
        self._price_level_mode = None
        self._script_id = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this CustomerInvoiceTemplateLine.


        :return: The id of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomerInvoiceTemplateLine.


        :param id: The id of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._id = id

    @property
    def create_date(self):
        """
        Gets the create_date of this CustomerInvoiceTemplateLine.


        :return: The create_date of this CustomerInvoiceTemplateLine.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this CustomerInvoiceTemplateLine.


        :param create_date: The create_date of this CustomerInvoiceTemplateLine.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def modify_date(self):
        """
        Gets the modify_date of this CustomerInvoiceTemplateLine.


        :return: The modify_date of this CustomerInvoiceTemplateLine.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this CustomerInvoiceTemplateLine.


        :param modify_date: The modify_date of this CustomerInvoiceTemplateLine.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def lob_id(self):
        """
        Gets the lob_id of this CustomerInvoiceTemplateLine.


        :return: The lob_id of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this CustomerInvoiceTemplateLine.


        :param lob_id: The lob_id of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def description(self):
        """
        Gets the description of this CustomerInvoiceTemplateLine.


        :return: The description of this CustomerInvoiceTemplateLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CustomerInvoiceTemplateLine.


        :param description: The description of this CustomerInvoiceTemplateLine.
        :type: str
        """
        self._description = description

    @property
    def seq_no(self):
        """
        Gets the seq_no of this CustomerInvoiceTemplateLine.


        :return: The seq_no of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._seq_no

    @seq_no.setter
    def seq_no(self, seq_no):
        """
        Sets the seq_no of this CustomerInvoiceTemplateLine.


        :param seq_no: The seq_no of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._seq_no = seq_no

    @property
    def account_code(self):
        """
        Gets the account_code of this CustomerInvoiceTemplateLine.


        :return: The account_code of this CustomerInvoiceTemplateLine.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """
        Sets the account_code of this CustomerInvoiceTemplateLine.


        :param account_code: The account_code of this CustomerInvoiceTemplateLine.
        :type: str
        """
        self._account_code = account_code

    @property
    def active(self):
        """
        Gets the active of this CustomerInvoiceTemplateLine.


        :return: The active of this CustomerInvoiceTemplateLine.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this CustomerInvoiceTemplateLine.


        :param active: The active of this CustomerInvoiceTemplateLine.
        :type: bool
        """
        self._active = active

    @property
    def include_if_zero(self):
        """
        Gets the include_if_zero of this CustomerInvoiceTemplateLine.


        :return: The include_if_zero of this CustomerInvoiceTemplateLine.
        :rtype: bool
        """
        return self._include_if_zero

    @include_if_zero.setter
    def include_if_zero(self, include_if_zero):
        """
        Sets the include_if_zero of this CustomerInvoiceTemplateLine.


        :param include_if_zero: The include_if_zero of this CustomerInvoiceTemplateLine.
        :type: bool
        """
        self._include_if_zero = include_if_zero

    @property
    def department(self):
        """
        Gets the department of this CustomerInvoiceTemplateLine.


        :return: The department of this CustomerInvoiceTemplateLine.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this CustomerInvoiceTemplateLine.


        :param department: The department of this CustomerInvoiceTemplateLine.
        :type: str
        """
        self._department = department

    @property
    def item_code(self):
        """
        Gets the item_code of this CustomerInvoiceTemplateLine.


        :return: The item_code of this CustomerInvoiceTemplateLine.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this CustomerInvoiceTemplateLine.


        :param item_code: The item_code of this CustomerInvoiceTemplateLine.
        :type: str
        """
        self._item_code = item_code

    @property
    def invoice_template_id(self):
        """
        Gets the invoice_template_id of this CustomerInvoiceTemplateLine.


        :return: The invoice_template_id of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """
        Sets the invoice_template_id of this CustomerInvoiceTemplateLine.


        :param invoice_template_id: The invoice_template_id of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._invoice_template_id = invoice_template_id

    @property
    def billing_rule_id(self):
        """
        Gets the billing_rule_id of this CustomerInvoiceTemplateLine.


        :return: The billing_rule_id of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._billing_rule_id

    @billing_rule_id.setter
    def billing_rule_id(self, billing_rule_id):
        """
        Sets the billing_rule_id of this CustomerInvoiceTemplateLine.


        :param billing_rule_id: The billing_rule_id of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._billing_rule_id = billing_rule_id

    @property
    def price_level_mode(self):
        """
        Gets the price_level_mode of this CustomerInvoiceTemplateLine.


        :return: The price_level_mode of this CustomerInvoiceTemplateLine.
        :rtype: str
        """
        return self._price_level_mode

    @price_level_mode.setter
    def price_level_mode(self, price_level_mode):
        """
        Sets the price_level_mode of this CustomerInvoiceTemplateLine.


        :param price_level_mode: The price_level_mode of this CustomerInvoiceTemplateLine.
        :type: str
        """
        self._price_level_mode = price_level_mode

    @property
    def script_id(self):
        """
        Gets the script_id of this CustomerInvoiceTemplateLine.


        :return: The script_id of this CustomerInvoiceTemplateLine.
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """
        Sets the script_id of this CustomerInvoiceTemplateLine.


        :param script_id: The script_id of this CustomerInvoiceTemplateLine.
        :type: int
        """
        self._script_id = script_id

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this CustomerInvoiceTemplateLine.


        :return: The custom_fields of this CustomerInvoiceTemplateLine.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this CustomerInvoiceTemplateLine.


        :param custom_fields: The custom_fields of this CustomerInvoiceTemplateLine.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

