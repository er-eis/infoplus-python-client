# coding: utf-8

"""
    Infoplus API

    Infoplus API.  # noqa: E501

    OpenAPI spec version: beta
    Contact: api@infopluscommerce.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SlaSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'lob_id': 'int',
        'warehouse_id': 'int',
        'effective_date': 'datetime',
        'standard_service_days': 'int',
        'standard_service_cutoff_hour': 'int',
        'mass_distribution_service_days': 'int',
        'mass_distribution_service_cutoff_hour': 'int',
        'backorder_service_days': 'int',
        'backorder_service_cutoff_hour': 'int',
        'rush_service_cutoff_hour': 'int',
        'custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'lob_id': 'lobId',
        'warehouse_id': 'warehouseId',
        'effective_date': 'effectiveDate',
        'standard_service_days': 'standardServiceDays',
        'standard_service_cutoff_hour': 'standardServiceCutoffHour',
        'mass_distribution_service_days': 'massDistributionServiceDays',
        'mass_distribution_service_cutoff_hour': 'massDistributionServiceCutoffHour',
        'backorder_service_days': 'backorderServiceDays',
        'backorder_service_cutoff_hour': 'backorderServiceCutoffHour',
        'rush_service_cutoff_hour': 'rushServiceCutoffHour',
        'custom_fields': 'customFields'
    }

    def __init__(self, id=None, lob_id=None, warehouse_id=None, effective_date=None, standard_service_days=None, standard_service_cutoff_hour=None, mass_distribution_service_days=None, mass_distribution_service_cutoff_hour=None, backorder_service_days=None, backorder_service_cutoff_hour=None, rush_service_cutoff_hour=None, custom_fields=None):  # noqa: E501
        """SlaSetup - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._lob_id = None
        self._warehouse_id = None
        self._effective_date = None
        self._standard_service_days = None
        self._standard_service_cutoff_hour = None
        self._mass_distribution_service_days = None
        self._mass_distribution_service_cutoff_hour = None
        self._backorder_service_days = None
        self._backorder_service_cutoff_hour = None
        self._rush_service_cutoff_hour = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.lob_id = lob_id
        self.warehouse_id = warehouse_id
        self.effective_date = effective_date
        self.standard_service_days = standard_service_days
        self.standard_service_cutoff_hour = standard_service_cutoff_hour
        self.mass_distribution_service_days = mass_distribution_service_days
        self.mass_distribution_service_cutoff_hour = mass_distribution_service_cutoff_hour
        self.backorder_service_days = backorder_service_days
        self.backorder_service_cutoff_hour = backorder_service_cutoff_hour
        self.rush_service_cutoff_hour = rush_service_cutoff_hour
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this SlaSetup.  # noqa: E501


        :return: The id of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlaSetup.


        :param id: The id of this SlaSetup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lob_id(self):
        """Gets the lob_id of this SlaSetup.  # noqa: E501


        :return: The lob_id of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """Sets the lob_id of this SlaSetup.


        :param lob_id: The lob_id of this SlaSetup.  # noqa: E501
        :type: int
        """
        if lob_id is None:
            raise ValueError("Invalid value for `lob_id`, must not be `None`")  # noqa: E501

        self._lob_id = lob_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this SlaSetup.  # noqa: E501


        :return: The warehouse_id of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this SlaSetup.


        :param warehouse_id: The warehouse_id of this SlaSetup.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def effective_date(self):
        """Gets the effective_date of this SlaSetup.  # noqa: E501


        :return: The effective_date of this SlaSetup.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this SlaSetup.


        :param effective_date: The effective_date of this SlaSetup.  # noqa: E501
        :type: datetime
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")  # noqa: E501

        self._effective_date = effective_date

    @property
    def standard_service_days(self):
        """Gets the standard_service_days of this SlaSetup.  # noqa: E501


        :return: The standard_service_days of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._standard_service_days

    @standard_service_days.setter
    def standard_service_days(self, standard_service_days):
        """Sets the standard_service_days of this SlaSetup.


        :param standard_service_days: The standard_service_days of this SlaSetup.  # noqa: E501
        :type: int
        """
        if standard_service_days is None:
            raise ValueError("Invalid value for `standard_service_days`, must not be `None`")  # noqa: E501

        self._standard_service_days = standard_service_days

    @property
    def standard_service_cutoff_hour(self):
        """Gets the standard_service_cutoff_hour of this SlaSetup.  # noqa: E501


        :return: The standard_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._standard_service_cutoff_hour

    @standard_service_cutoff_hour.setter
    def standard_service_cutoff_hour(self, standard_service_cutoff_hour):
        """Sets the standard_service_cutoff_hour of this SlaSetup.


        :param standard_service_cutoff_hour: The standard_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :type: int
        """
        if standard_service_cutoff_hour is None:
            raise ValueError("Invalid value for `standard_service_cutoff_hour`, must not be `None`")  # noqa: E501

        self._standard_service_cutoff_hour = standard_service_cutoff_hour

    @property
    def mass_distribution_service_days(self):
        """Gets the mass_distribution_service_days of this SlaSetup.  # noqa: E501


        :return: The mass_distribution_service_days of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._mass_distribution_service_days

    @mass_distribution_service_days.setter
    def mass_distribution_service_days(self, mass_distribution_service_days):
        """Sets the mass_distribution_service_days of this SlaSetup.


        :param mass_distribution_service_days: The mass_distribution_service_days of this SlaSetup.  # noqa: E501
        :type: int
        """
        if mass_distribution_service_days is None:
            raise ValueError("Invalid value for `mass_distribution_service_days`, must not be `None`")  # noqa: E501

        self._mass_distribution_service_days = mass_distribution_service_days

    @property
    def mass_distribution_service_cutoff_hour(self):
        """Gets the mass_distribution_service_cutoff_hour of this SlaSetup.  # noqa: E501


        :return: The mass_distribution_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._mass_distribution_service_cutoff_hour

    @mass_distribution_service_cutoff_hour.setter
    def mass_distribution_service_cutoff_hour(self, mass_distribution_service_cutoff_hour):
        """Sets the mass_distribution_service_cutoff_hour of this SlaSetup.


        :param mass_distribution_service_cutoff_hour: The mass_distribution_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :type: int
        """
        if mass_distribution_service_cutoff_hour is None:
            raise ValueError("Invalid value for `mass_distribution_service_cutoff_hour`, must not be `None`")  # noqa: E501

        self._mass_distribution_service_cutoff_hour = mass_distribution_service_cutoff_hour

    @property
    def backorder_service_days(self):
        """Gets the backorder_service_days of this SlaSetup.  # noqa: E501


        :return: The backorder_service_days of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._backorder_service_days

    @backorder_service_days.setter
    def backorder_service_days(self, backorder_service_days):
        """Sets the backorder_service_days of this SlaSetup.


        :param backorder_service_days: The backorder_service_days of this SlaSetup.  # noqa: E501
        :type: int
        """
        if backorder_service_days is None:
            raise ValueError("Invalid value for `backorder_service_days`, must not be `None`")  # noqa: E501

        self._backorder_service_days = backorder_service_days

    @property
    def backorder_service_cutoff_hour(self):
        """Gets the backorder_service_cutoff_hour of this SlaSetup.  # noqa: E501


        :return: The backorder_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._backorder_service_cutoff_hour

    @backorder_service_cutoff_hour.setter
    def backorder_service_cutoff_hour(self, backorder_service_cutoff_hour):
        """Sets the backorder_service_cutoff_hour of this SlaSetup.


        :param backorder_service_cutoff_hour: The backorder_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :type: int
        """
        if backorder_service_cutoff_hour is None:
            raise ValueError("Invalid value for `backorder_service_cutoff_hour`, must not be `None`")  # noqa: E501

        self._backorder_service_cutoff_hour = backorder_service_cutoff_hour

    @property
    def rush_service_cutoff_hour(self):
        """Gets the rush_service_cutoff_hour of this SlaSetup.  # noqa: E501


        :return: The rush_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :rtype: int
        """
        return self._rush_service_cutoff_hour

    @rush_service_cutoff_hour.setter
    def rush_service_cutoff_hour(self, rush_service_cutoff_hour):
        """Sets the rush_service_cutoff_hour of this SlaSetup.


        :param rush_service_cutoff_hour: The rush_service_cutoff_hour of this SlaSetup.  # noqa: E501
        :type: int
        """
        if rush_service_cutoff_hour is None:
            raise ValueError("Invalid value for `rush_service_cutoff_hour`, must not be `None`")  # noqa: E501

        self._rush_service_cutoff_hour = rush_service_cutoff_hour

    @property
    def custom_fields(self):
        """Gets the custom_fields of this SlaSetup.  # noqa: E501


        :return: The custom_fields of this SlaSetup.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this SlaSetup.


        :param custom_fields: The custom_fields of this SlaSetup.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlaSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
