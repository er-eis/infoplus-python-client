# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Item(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Item - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'account_code_id': 'int',
            'low_stock_contact_id': 'int',
            'legacy_low_level_contact_id': 'int',
            'low_stock_code_id': 'int',
            'major_group_id': 'int',
            'sub_group_id': 'int',
            'product_code_id': 'int',
            'summary_code_id': 'int',
            'buyer_id': 'int',
            'lob_id': 'int',
            'sku': 'str',
            'vendor_sku': 'str',
            'upc': 'str',
            'item_description': 'str',
            'packing_slip_description': 'str',
            'absolute_max': 'str',
            'additional_description': 'str',
            'backorder': 'str',
            'charge_code': 'str',
            'commodity_code': 'str',
            'comp_code': 'int',
            'create_date': 'datetime',
            'critical_amount': 'int',
            'overall_fixed_reorder_point': 'int',
            'overall_lead_time': 'int',
            'list_price': 'float',
            'lot_control_flag': 'str',
            'max_cycle': 'int',
            'max_interim': 'int',
            'numeric_sort_order': 'int',
            'outside_vendor': 'int',
            'pick_no': 'str',
            'pod_order_suffix': 'int',
            'pod_rev_date': 'str',
            'status': 'str',
            'seasonal_item': 'str',
            'requires_production_lot': 'str',
            'sector': 'str',
            'secure': 'str',
            'serial_code': 'str',
            'unit_code': 'str',
            'units_per_wrap': 'int',
            'weight_per_wrap': 'float',
            'void_date': 'datetime',
            'wrap_code': 'str',
            'extrinsic_text1': 'str',
            'extrinsic_text2': 'str',
            'extrinsic_text3': 'str',
            'extrinsic_number1': 'int',
            'extrinsic_number2': 'int',
            'extrinsic_decimal1': 'float',
            'extrinsic_decimal2': 'float',
            'casebreak_enabled': 'str',
            'modify_date': 'datetime',
            'forward_lot_mixing_rule': 'str',
            'storage_lot_mixing_rule': 'str',
            'forward_item_mixing_rule': 'str',
            'storage_item_mixing_rule': 'str',
            'allocation_rule': 'str',
            'barcode_field': 'str',
            'hazmat': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'id': 'id',
            'account_code_id': 'accountCodeId',
            'low_stock_contact_id': 'lowStockContactId',
            'legacy_low_level_contact_id': 'legacyLowLevelContactId',
            'low_stock_code_id': 'lowStockCodeId',
            'major_group_id': 'majorGroupId',
            'sub_group_id': 'subGroupId',
            'product_code_id': 'productCodeId',
            'summary_code_id': 'summaryCodeId',
            'buyer_id': 'buyerId',
            'lob_id': 'lobId',
            'sku': 'sku',
            'vendor_sku': 'vendorSKU',
            'upc': 'upc',
            'item_description': 'itemDescription',
            'packing_slip_description': 'packingSlipDescription',
            'absolute_max': 'absoluteMax',
            'additional_description': 'additionalDescription',
            'backorder': 'backorder',
            'charge_code': 'chargeCode',
            'commodity_code': 'commodityCode',
            'comp_code': 'compCode',
            'create_date': 'createDate',
            'critical_amount': 'criticalAmount',
            'overall_fixed_reorder_point': 'overallFixedReorderPoint',
            'overall_lead_time': 'overallLeadTime',
            'list_price': 'listPrice',
            'lot_control_flag': 'lotControlFlag',
            'max_cycle': 'maxCycle',
            'max_interim': 'maxInterim',
            'numeric_sort_order': 'numericSortOrder',
            'outside_vendor': 'outsideVendor',
            'pick_no': 'pickNo',
            'pod_order_suffix': 'podOrderSuffix',
            'pod_rev_date': 'podRevDate',
            'status': 'status',
            'seasonal_item': 'seasonalItem',
            'requires_production_lot': 'requiresProductionLot',
            'sector': 'sector',
            'secure': 'secure',
            'serial_code': 'serialCode',
            'unit_code': 'unitCode',
            'units_per_wrap': 'unitsPerWrap',
            'weight_per_wrap': 'weightPerWrap',
            'void_date': 'voidDate',
            'wrap_code': 'wrapCode',
            'extrinsic_text1': 'extrinsicText1',
            'extrinsic_text2': 'extrinsicText2',
            'extrinsic_text3': 'extrinsicText3',
            'extrinsic_number1': 'extrinsicNumber1',
            'extrinsic_number2': 'extrinsicNumber2',
            'extrinsic_decimal1': 'extrinsicDecimal1',
            'extrinsic_decimal2': 'extrinsicDecimal2',
            'casebreak_enabled': 'casebreakEnabled',
            'modify_date': 'modifyDate',
            'forward_lot_mixing_rule': 'forwardLotMixingRule',
            'storage_lot_mixing_rule': 'storageLotMixingRule',
            'forward_item_mixing_rule': 'forwardItemMixingRule',
            'storage_item_mixing_rule': 'storageItemMixingRule',
            'allocation_rule': 'allocationRule',
            'barcode_field': 'barcodeField',
            'hazmat': 'hazmat',
            'custom_fields': 'customFields'
        }

        self._id = None
        self._account_code_id = None
        self._low_stock_contact_id = None
        self._legacy_low_level_contact_id = None
        self._low_stock_code_id = None
        self._major_group_id = None
        self._sub_group_id = None
        self._product_code_id = None
        self._summary_code_id = None
        self._buyer_id = None
        self._lob_id = None
        self._sku = None
        self._vendor_sku = None
        self._upc = None
        self._item_description = None
        self._packing_slip_description = None
        self._absolute_max = None
        self._additional_description = None
        self._backorder = None
        self._charge_code = None
        self._commodity_code = None
        self._comp_code = None
        self._create_date = None
        self._critical_amount = None
        self._overall_fixed_reorder_point = None
        self._overall_lead_time = None
        self._list_price = None
        self._lot_control_flag = None
        self._max_cycle = None
        self._max_interim = None
        self._numeric_sort_order = None
        self._outside_vendor = None
        self._pick_no = None
        self._pod_order_suffix = None
        self._pod_rev_date = None
        self._status = None
        self._seasonal_item = None
        self._requires_production_lot = None
        self._sector = None
        self._secure = None
        self._serial_code = None
        self._unit_code = None
        self._units_per_wrap = None
        self._weight_per_wrap = None
        self._void_date = None
        self._wrap_code = None
        self._extrinsic_text1 = None
        self._extrinsic_text2 = None
        self._extrinsic_text3 = None
        self._extrinsic_number1 = None
        self._extrinsic_number2 = None
        self._extrinsic_decimal1 = None
        self._extrinsic_decimal2 = None
        self._casebreak_enabled = None
        self._modify_date = None
        self._forward_lot_mixing_rule = None
        self._storage_lot_mixing_rule = None
        self._forward_item_mixing_rule = None
        self._storage_item_mixing_rule = None
        self._allocation_rule = None
        self._barcode_field = None
        self._hazmat = None
        self._custom_fields = None

    @property
    def id(self):
        """
        Gets the id of this Item.


        :return: The id of this Item.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Item.


        :param id: The id of this Item.
        :type: int
        """
        self._id = id

    @property
    def account_code_id(self):
        """
        Gets the account_code_id of this Item.


        :return: The account_code_id of this Item.
        :rtype: int
        """
        return self._account_code_id

    @account_code_id.setter
    def account_code_id(self, account_code_id):
        """
        Sets the account_code_id of this Item.


        :param account_code_id: The account_code_id of this Item.
        :type: int
        """
        self._account_code_id = account_code_id

    @property
    def low_stock_contact_id(self):
        """
        Gets the low_stock_contact_id of this Item.


        :return: The low_stock_contact_id of this Item.
        :rtype: int
        """
        return self._low_stock_contact_id

    @low_stock_contact_id.setter
    def low_stock_contact_id(self, low_stock_contact_id):
        """
        Sets the low_stock_contact_id of this Item.


        :param low_stock_contact_id: The low_stock_contact_id of this Item.
        :type: int
        """
        self._low_stock_contact_id = low_stock_contact_id

    @property
    def legacy_low_level_contact_id(self):
        """
        Gets the legacy_low_level_contact_id of this Item.


        :return: The legacy_low_level_contact_id of this Item.
        :rtype: int
        """
        return self._legacy_low_level_contact_id

    @legacy_low_level_contact_id.setter
    def legacy_low_level_contact_id(self, legacy_low_level_contact_id):
        """
        Sets the legacy_low_level_contact_id of this Item.


        :param legacy_low_level_contact_id: The legacy_low_level_contact_id of this Item.
        :type: int
        """
        self._legacy_low_level_contact_id = legacy_low_level_contact_id

    @property
    def low_stock_code_id(self):
        """
        Gets the low_stock_code_id of this Item.


        :return: The low_stock_code_id of this Item.
        :rtype: int
        """
        return self._low_stock_code_id

    @low_stock_code_id.setter
    def low_stock_code_id(self, low_stock_code_id):
        """
        Sets the low_stock_code_id of this Item.


        :param low_stock_code_id: The low_stock_code_id of this Item.
        :type: int
        """
        self._low_stock_code_id = low_stock_code_id

    @property
    def major_group_id(self):
        """
        Gets the major_group_id of this Item.


        :return: The major_group_id of this Item.
        :rtype: int
        """
        return self._major_group_id

    @major_group_id.setter
    def major_group_id(self, major_group_id):
        """
        Sets the major_group_id of this Item.


        :param major_group_id: The major_group_id of this Item.
        :type: int
        """
        self._major_group_id = major_group_id

    @property
    def sub_group_id(self):
        """
        Gets the sub_group_id of this Item.


        :return: The sub_group_id of this Item.
        :rtype: int
        """
        return self._sub_group_id

    @sub_group_id.setter
    def sub_group_id(self, sub_group_id):
        """
        Sets the sub_group_id of this Item.


        :param sub_group_id: The sub_group_id of this Item.
        :type: int
        """
        self._sub_group_id = sub_group_id

    @property
    def product_code_id(self):
        """
        Gets the product_code_id of this Item.


        :return: The product_code_id of this Item.
        :rtype: int
        """
        return self._product_code_id

    @product_code_id.setter
    def product_code_id(self, product_code_id):
        """
        Sets the product_code_id of this Item.


        :param product_code_id: The product_code_id of this Item.
        :type: int
        """
        self._product_code_id = product_code_id

    @property
    def summary_code_id(self):
        """
        Gets the summary_code_id of this Item.


        :return: The summary_code_id of this Item.
        :rtype: int
        """
        return self._summary_code_id

    @summary_code_id.setter
    def summary_code_id(self, summary_code_id):
        """
        Sets the summary_code_id of this Item.


        :param summary_code_id: The summary_code_id of this Item.
        :type: int
        """
        self._summary_code_id = summary_code_id

    @property
    def buyer_id(self):
        """
        Gets the buyer_id of this Item.


        :return: The buyer_id of this Item.
        :rtype: int
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """
        Sets the buyer_id of this Item.


        :param buyer_id: The buyer_id of this Item.
        :type: int
        """
        self._buyer_id = buyer_id

    @property
    def lob_id(self):
        """
        Gets the lob_id of this Item.


        :return: The lob_id of this Item.
        :rtype: int
        """
        return self._lob_id

    @lob_id.setter
    def lob_id(self, lob_id):
        """
        Sets the lob_id of this Item.


        :param lob_id: The lob_id of this Item.
        :type: int
        """
        self._lob_id = lob_id

    @property
    def sku(self):
        """
        Gets the sku of this Item.


        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Item.


        :param sku: The sku of this Item.
        :type: str
        """
        self._sku = sku

    @property
    def vendor_sku(self):
        """
        Gets the vendor_sku of this Item.


        :return: The vendor_sku of this Item.
        :rtype: str
        """
        return self._vendor_sku

    @vendor_sku.setter
    def vendor_sku(self, vendor_sku):
        """
        Sets the vendor_sku of this Item.


        :param vendor_sku: The vendor_sku of this Item.
        :type: str
        """
        self._vendor_sku = vendor_sku

    @property
    def upc(self):
        """
        Gets the upc of this Item.


        :return: The upc of this Item.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """
        Sets the upc of this Item.


        :param upc: The upc of this Item.
        :type: str
        """
        self._upc = upc

    @property
    def item_description(self):
        """
        Gets the item_description of this Item.


        :return: The item_description of this Item.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this Item.


        :param item_description: The item_description of this Item.
        :type: str
        """
        self._item_description = item_description

    @property
    def packing_slip_description(self):
        """
        Gets the packing_slip_description of this Item.


        :return: The packing_slip_description of this Item.
        :rtype: str
        """
        return self._packing_slip_description

    @packing_slip_description.setter
    def packing_slip_description(self, packing_slip_description):
        """
        Sets the packing_slip_description of this Item.


        :param packing_slip_description: The packing_slip_description of this Item.
        :type: str
        """
        self._packing_slip_description = packing_slip_description

    @property
    def absolute_max(self):
        """
        Gets the absolute_max of this Item.


        :return: The absolute_max of this Item.
        :rtype: str
        """
        return self._absolute_max

    @absolute_max.setter
    def absolute_max(self, absolute_max):
        """
        Sets the absolute_max of this Item.


        :param absolute_max: The absolute_max of this Item.
        :type: str
        """
        self._absolute_max = absolute_max

    @property
    def additional_description(self):
        """
        Gets the additional_description of this Item.


        :return: The additional_description of this Item.
        :rtype: str
        """
        return self._additional_description

    @additional_description.setter
    def additional_description(self, additional_description):
        """
        Sets the additional_description of this Item.


        :param additional_description: The additional_description of this Item.
        :type: str
        """
        self._additional_description = additional_description

    @property
    def backorder(self):
        """
        Gets the backorder of this Item.


        :return: The backorder of this Item.
        :rtype: str
        """
        return self._backorder

    @backorder.setter
    def backorder(self, backorder):
        """
        Sets the backorder of this Item.


        :param backorder: The backorder of this Item.
        :type: str
        """
        self._backorder = backorder

    @property
    def charge_code(self):
        """
        Gets the charge_code of this Item.


        :return: The charge_code of this Item.
        :rtype: str
        """
        return self._charge_code

    @charge_code.setter
    def charge_code(self, charge_code):
        """
        Sets the charge_code of this Item.


        :param charge_code: The charge_code of this Item.
        :type: str
        """
        self._charge_code = charge_code

    @property
    def commodity_code(self):
        """
        Gets the commodity_code of this Item.


        :return: The commodity_code of this Item.
        :rtype: str
        """
        return self._commodity_code

    @commodity_code.setter
    def commodity_code(self, commodity_code):
        """
        Sets the commodity_code of this Item.


        :param commodity_code: The commodity_code of this Item.
        :type: str
        """
        self._commodity_code = commodity_code

    @property
    def comp_code(self):
        """
        Gets the comp_code of this Item.


        :return: The comp_code of this Item.
        :rtype: int
        """
        return self._comp_code

    @comp_code.setter
    def comp_code(self, comp_code):
        """
        Sets the comp_code of this Item.


        :param comp_code: The comp_code of this Item.
        :type: int
        """
        self._comp_code = comp_code

    @property
    def create_date(self):
        """
        Gets the create_date of this Item.


        :return: The create_date of this Item.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """
        Sets the create_date of this Item.


        :param create_date: The create_date of this Item.
        :type: datetime
        """
        self._create_date = create_date

    @property
    def critical_amount(self):
        """
        Gets the critical_amount of this Item.


        :return: The critical_amount of this Item.
        :rtype: int
        """
        return self._critical_amount

    @critical_amount.setter
    def critical_amount(self, critical_amount):
        """
        Sets the critical_amount of this Item.


        :param critical_amount: The critical_amount of this Item.
        :type: int
        """
        self._critical_amount = critical_amount

    @property
    def overall_fixed_reorder_point(self):
        """
        Gets the overall_fixed_reorder_point of this Item.


        :return: The overall_fixed_reorder_point of this Item.
        :rtype: int
        """
        return self._overall_fixed_reorder_point

    @overall_fixed_reorder_point.setter
    def overall_fixed_reorder_point(self, overall_fixed_reorder_point):
        """
        Sets the overall_fixed_reorder_point of this Item.


        :param overall_fixed_reorder_point: The overall_fixed_reorder_point of this Item.
        :type: int
        """
        self._overall_fixed_reorder_point = overall_fixed_reorder_point

    @property
    def overall_lead_time(self):
        """
        Gets the overall_lead_time of this Item.


        :return: The overall_lead_time of this Item.
        :rtype: int
        """
        return self._overall_lead_time

    @overall_lead_time.setter
    def overall_lead_time(self, overall_lead_time):
        """
        Sets the overall_lead_time of this Item.


        :param overall_lead_time: The overall_lead_time of this Item.
        :type: int
        """
        self._overall_lead_time = overall_lead_time

    @property
    def list_price(self):
        """
        Gets the list_price of this Item.


        :return: The list_price of this Item.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """
        Sets the list_price of this Item.


        :param list_price: The list_price of this Item.
        :type: float
        """
        self._list_price = list_price

    @property
    def lot_control_flag(self):
        """
        Gets the lot_control_flag of this Item.


        :return: The lot_control_flag of this Item.
        :rtype: str
        """
        return self._lot_control_flag

    @lot_control_flag.setter
    def lot_control_flag(self, lot_control_flag):
        """
        Sets the lot_control_flag of this Item.


        :param lot_control_flag: The lot_control_flag of this Item.
        :type: str
        """
        self._lot_control_flag = lot_control_flag

    @property
    def max_cycle(self):
        """
        Gets the max_cycle of this Item.


        :return: The max_cycle of this Item.
        :rtype: int
        """
        return self._max_cycle

    @max_cycle.setter
    def max_cycle(self, max_cycle):
        """
        Sets the max_cycle of this Item.


        :param max_cycle: The max_cycle of this Item.
        :type: int
        """
        self._max_cycle = max_cycle

    @property
    def max_interim(self):
        """
        Gets the max_interim of this Item.


        :return: The max_interim of this Item.
        :rtype: int
        """
        return self._max_interim

    @max_interim.setter
    def max_interim(self, max_interim):
        """
        Sets the max_interim of this Item.


        :param max_interim: The max_interim of this Item.
        :type: int
        """
        self._max_interim = max_interim

    @property
    def numeric_sort_order(self):
        """
        Gets the numeric_sort_order of this Item.


        :return: The numeric_sort_order of this Item.
        :rtype: int
        """
        return self._numeric_sort_order

    @numeric_sort_order.setter
    def numeric_sort_order(self, numeric_sort_order):
        """
        Sets the numeric_sort_order of this Item.


        :param numeric_sort_order: The numeric_sort_order of this Item.
        :type: int
        """
        self._numeric_sort_order = numeric_sort_order

    @property
    def outside_vendor(self):
        """
        Gets the outside_vendor of this Item.


        :return: The outside_vendor of this Item.
        :rtype: int
        """
        return self._outside_vendor

    @outside_vendor.setter
    def outside_vendor(self, outside_vendor):
        """
        Sets the outside_vendor of this Item.


        :param outside_vendor: The outside_vendor of this Item.
        :type: int
        """
        self._outside_vendor = outside_vendor

    @property
    def pick_no(self):
        """
        Gets the pick_no of this Item.


        :return: The pick_no of this Item.
        :rtype: str
        """
        return self._pick_no

    @pick_no.setter
    def pick_no(self, pick_no):
        """
        Sets the pick_no of this Item.


        :param pick_no: The pick_no of this Item.
        :type: str
        """
        self._pick_no = pick_no

    @property
    def pod_order_suffix(self):
        """
        Gets the pod_order_suffix of this Item.


        :return: The pod_order_suffix of this Item.
        :rtype: int
        """
        return self._pod_order_suffix

    @pod_order_suffix.setter
    def pod_order_suffix(self, pod_order_suffix):
        """
        Sets the pod_order_suffix of this Item.


        :param pod_order_suffix: The pod_order_suffix of this Item.
        :type: int
        """
        self._pod_order_suffix = pod_order_suffix

    @property
    def pod_rev_date(self):
        """
        Gets the pod_rev_date of this Item.


        :return: The pod_rev_date of this Item.
        :rtype: str
        """
        return self._pod_rev_date

    @pod_rev_date.setter
    def pod_rev_date(self, pod_rev_date):
        """
        Sets the pod_rev_date of this Item.


        :param pod_rev_date: The pod_rev_date of this Item.
        :type: str
        """
        self._pod_rev_date = pod_rev_date

    @property
    def status(self):
        """
        Gets the status of this Item.


        :return: The status of this Item.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Item.


        :param status: The status of this Item.
        :type: str
        """
        self._status = status

    @property
    def seasonal_item(self):
        """
        Gets the seasonal_item of this Item.


        :return: The seasonal_item of this Item.
        :rtype: str
        """
        return self._seasonal_item

    @seasonal_item.setter
    def seasonal_item(self, seasonal_item):
        """
        Sets the seasonal_item of this Item.


        :param seasonal_item: The seasonal_item of this Item.
        :type: str
        """
        self._seasonal_item = seasonal_item

    @property
    def requires_production_lot(self):
        """
        Gets the requires_production_lot of this Item.


        :return: The requires_production_lot of this Item.
        :rtype: str
        """
        return self._requires_production_lot

    @requires_production_lot.setter
    def requires_production_lot(self, requires_production_lot):
        """
        Sets the requires_production_lot of this Item.


        :param requires_production_lot: The requires_production_lot of this Item.
        :type: str
        """
        self._requires_production_lot = requires_production_lot

    @property
    def sector(self):
        """
        Gets the sector of this Item.


        :return: The sector of this Item.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """
        Sets the sector of this Item.


        :param sector: The sector of this Item.
        :type: str
        """
        self._sector = sector

    @property
    def secure(self):
        """
        Gets the secure of this Item.


        :return: The secure of this Item.
        :rtype: str
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """
        Sets the secure of this Item.


        :param secure: The secure of this Item.
        :type: str
        """
        self._secure = secure

    @property
    def serial_code(self):
        """
        Gets the serial_code of this Item.


        :return: The serial_code of this Item.
        :rtype: str
        """
        return self._serial_code

    @serial_code.setter
    def serial_code(self, serial_code):
        """
        Sets the serial_code of this Item.


        :param serial_code: The serial_code of this Item.
        :type: str
        """
        self._serial_code = serial_code

    @property
    def unit_code(self):
        """
        Gets the unit_code of this Item.


        :return: The unit_code of this Item.
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """
        Sets the unit_code of this Item.


        :param unit_code: The unit_code of this Item.
        :type: str
        """
        self._unit_code = unit_code

    @property
    def units_per_wrap(self):
        """
        Gets the units_per_wrap of this Item.


        :return: The units_per_wrap of this Item.
        :rtype: int
        """
        return self._units_per_wrap

    @units_per_wrap.setter
    def units_per_wrap(self, units_per_wrap):
        """
        Sets the units_per_wrap of this Item.


        :param units_per_wrap: The units_per_wrap of this Item.
        :type: int
        """
        self._units_per_wrap = units_per_wrap

    @property
    def weight_per_wrap(self):
        """
        Gets the weight_per_wrap of this Item.


        :return: The weight_per_wrap of this Item.
        :rtype: float
        """
        return self._weight_per_wrap

    @weight_per_wrap.setter
    def weight_per_wrap(self, weight_per_wrap):
        """
        Sets the weight_per_wrap of this Item.


        :param weight_per_wrap: The weight_per_wrap of this Item.
        :type: float
        """
        self._weight_per_wrap = weight_per_wrap

    @property
    def void_date(self):
        """
        Gets the void_date of this Item.


        :return: The void_date of this Item.
        :rtype: datetime
        """
        return self._void_date

    @void_date.setter
    def void_date(self, void_date):
        """
        Sets the void_date of this Item.


        :param void_date: The void_date of this Item.
        :type: datetime
        """
        self._void_date = void_date

    @property
    def wrap_code(self):
        """
        Gets the wrap_code of this Item.


        :return: The wrap_code of this Item.
        :rtype: str
        """
        return self._wrap_code

    @wrap_code.setter
    def wrap_code(self, wrap_code):
        """
        Sets the wrap_code of this Item.


        :param wrap_code: The wrap_code of this Item.
        :type: str
        """
        self._wrap_code = wrap_code

    @property
    def extrinsic_text1(self):
        """
        Gets the extrinsic_text1 of this Item.


        :return: The extrinsic_text1 of this Item.
        :rtype: str
        """
        return self._extrinsic_text1

    @extrinsic_text1.setter
    def extrinsic_text1(self, extrinsic_text1):
        """
        Sets the extrinsic_text1 of this Item.


        :param extrinsic_text1: The extrinsic_text1 of this Item.
        :type: str
        """
        self._extrinsic_text1 = extrinsic_text1

    @property
    def extrinsic_text2(self):
        """
        Gets the extrinsic_text2 of this Item.


        :return: The extrinsic_text2 of this Item.
        :rtype: str
        """
        return self._extrinsic_text2

    @extrinsic_text2.setter
    def extrinsic_text2(self, extrinsic_text2):
        """
        Sets the extrinsic_text2 of this Item.


        :param extrinsic_text2: The extrinsic_text2 of this Item.
        :type: str
        """
        self._extrinsic_text2 = extrinsic_text2

    @property
    def extrinsic_text3(self):
        """
        Gets the extrinsic_text3 of this Item.


        :return: The extrinsic_text3 of this Item.
        :rtype: str
        """
        return self._extrinsic_text3

    @extrinsic_text3.setter
    def extrinsic_text3(self, extrinsic_text3):
        """
        Sets the extrinsic_text3 of this Item.


        :param extrinsic_text3: The extrinsic_text3 of this Item.
        :type: str
        """
        self._extrinsic_text3 = extrinsic_text3

    @property
    def extrinsic_number1(self):
        """
        Gets the extrinsic_number1 of this Item.


        :return: The extrinsic_number1 of this Item.
        :rtype: int
        """
        return self._extrinsic_number1

    @extrinsic_number1.setter
    def extrinsic_number1(self, extrinsic_number1):
        """
        Sets the extrinsic_number1 of this Item.


        :param extrinsic_number1: The extrinsic_number1 of this Item.
        :type: int
        """
        self._extrinsic_number1 = extrinsic_number1

    @property
    def extrinsic_number2(self):
        """
        Gets the extrinsic_number2 of this Item.


        :return: The extrinsic_number2 of this Item.
        :rtype: int
        """
        return self._extrinsic_number2

    @extrinsic_number2.setter
    def extrinsic_number2(self, extrinsic_number2):
        """
        Sets the extrinsic_number2 of this Item.


        :param extrinsic_number2: The extrinsic_number2 of this Item.
        :type: int
        """
        self._extrinsic_number2 = extrinsic_number2

    @property
    def extrinsic_decimal1(self):
        """
        Gets the extrinsic_decimal1 of this Item.


        :return: The extrinsic_decimal1 of this Item.
        :rtype: float
        """
        return self._extrinsic_decimal1

    @extrinsic_decimal1.setter
    def extrinsic_decimal1(self, extrinsic_decimal1):
        """
        Sets the extrinsic_decimal1 of this Item.


        :param extrinsic_decimal1: The extrinsic_decimal1 of this Item.
        :type: float
        """
        self._extrinsic_decimal1 = extrinsic_decimal1

    @property
    def extrinsic_decimal2(self):
        """
        Gets the extrinsic_decimal2 of this Item.


        :return: The extrinsic_decimal2 of this Item.
        :rtype: float
        """
        return self._extrinsic_decimal2

    @extrinsic_decimal2.setter
    def extrinsic_decimal2(self, extrinsic_decimal2):
        """
        Sets the extrinsic_decimal2 of this Item.


        :param extrinsic_decimal2: The extrinsic_decimal2 of this Item.
        :type: float
        """
        self._extrinsic_decimal2 = extrinsic_decimal2

    @property
    def casebreak_enabled(self):
        """
        Gets the casebreak_enabled of this Item.


        :return: The casebreak_enabled of this Item.
        :rtype: str
        """
        return self._casebreak_enabled

    @casebreak_enabled.setter
    def casebreak_enabled(self, casebreak_enabled):
        """
        Sets the casebreak_enabled of this Item.


        :param casebreak_enabled: The casebreak_enabled of this Item.
        :type: str
        """
        self._casebreak_enabled = casebreak_enabled

    @property
    def modify_date(self):
        """
        Gets the modify_date of this Item.


        :return: The modify_date of this Item.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """
        Sets the modify_date of this Item.


        :param modify_date: The modify_date of this Item.
        :type: datetime
        """
        self._modify_date = modify_date

    @property
    def forward_lot_mixing_rule(self):
        """
        Gets the forward_lot_mixing_rule of this Item.


        :return: The forward_lot_mixing_rule of this Item.
        :rtype: str
        """
        return self._forward_lot_mixing_rule

    @forward_lot_mixing_rule.setter
    def forward_lot_mixing_rule(self, forward_lot_mixing_rule):
        """
        Sets the forward_lot_mixing_rule of this Item.


        :param forward_lot_mixing_rule: The forward_lot_mixing_rule of this Item.
        :type: str
        """
        self._forward_lot_mixing_rule = forward_lot_mixing_rule

    @property
    def storage_lot_mixing_rule(self):
        """
        Gets the storage_lot_mixing_rule of this Item.


        :return: The storage_lot_mixing_rule of this Item.
        :rtype: str
        """
        return self._storage_lot_mixing_rule

    @storage_lot_mixing_rule.setter
    def storage_lot_mixing_rule(self, storage_lot_mixing_rule):
        """
        Sets the storage_lot_mixing_rule of this Item.


        :param storage_lot_mixing_rule: The storage_lot_mixing_rule of this Item.
        :type: str
        """
        self._storage_lot_mixing_rule = storage_lot_mixing_rule

    @property
    def forward_item_mixing_rule(self):
        """
        Gets the forward_item_mixing_rule of this Item.


        :return: The forward_item_mixing_rule of this Item.
        :rtype: str
        """
        return self._forward_item_mixing_rule

    @forward_item_mixing_rule.setter
    def forward_item_mixing_rule(self, forward_item_mixing_rule):
        """
        Sets the forward_item_mixing_rule of this Item.


        :param forward_item_mixing_rule: The forward_item_mixing_rule of this Item.
        :type: str
        """
        self._forward_item_mixing_rule = forward_item_mixing_rule

    @property
    def storage_item_mixing_rule(self):
        """
        Gets the storage_item_mixing_rule of this Item.


        :return: The storage_item_mixing_rule of this Item.
        :rtype: str
        """
        return self._storage_item_mixing_rule

    @storage_item_mixing_rule.setter
    def storage_item_mixing_rule(self, storage_item_mixing_rule):
        """
        Sets the storage_item_mixing_rule of this Item.


        :param storage_item_mixing_rule: The storage_item_mixing_rule of this Item.
        :type: str
        """
        self._storage_item_mixing_rule = storage_item_mixing_rule

    @property
    def allocation_rule(self):
        """
        Gets the allocation_rule of this Item.


        :return: The allocation_rule of this Item.
        :rtype: str
        """
        return self._allocation_rule

    @allocation_rule.setter
    def allocation_rule(self, allocation_rule):
        """
        Sets the allocation_rule of this Item.


        :param allocation_rule: The allocation_rule of this Item.
        :type: str
        """
        self._allocation_rule = allocation_rule

    @property
    def barcode_field(self):
        """
        Gets the barcode_field of this Item.


        :return: The barcode_field of this Item.
        :rtype: str
        """
        return self._barcode_field

    @barcode_field.setter
    def barcode_field(self, barcode_field):
        """
        Sets the barcode_field of this Item.


        :param barcode_field: The barcode_field of this Item.
        :type: str
        """
        self._barcode_field = barcode_field

    @property
    def hazmat(self):
        """
        Gets the hazmat of this Item.


        :return: The hazmat of this Item.
        :rtype: str
        """
        return self._hazmat

    @hazmat.setter
    def hazmat(self, hazmat):
        """
        Sets the hazmat of this Item.


        :param hazmat: The hazmat of this Item.
        :type: str
        """
        self._hazmat = hazmat

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this Item.


        :return: The custom_fields of this Item.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this Item.


        :param custom_fields: The custom_fields of this Item.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

