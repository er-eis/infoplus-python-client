# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class KitComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        KitComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sku': 'str',
            'quantity': 'int',
            'instructions': 'str',
            'additional_services': 'str',
            'critical': 'str',
            'custom_fields': 'dict(str, object)'
        }

        self.attribute_map = {
            'sku': 'sku',
            'quantity': 'quantity',
            'instructions': 'instructions',
            'additional_services': 'additionalServices',
            'critical': 'critical',
            'custom_fields': 'customFields'
        }

        self._sku = None
        self._quantity = None
        self._instructions = None
        self._additional_services = None
        self._critical = None
        self._custom_fields = None

    @property
    def sku(self):
        """
        Gets the sku of this KitComponent.


        :return: The sku of this KitComponent.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this KitComponent.


        :param sku: The sku of this KitComponent.
        :type: str
        """
        self._sku = sku

    @property
    def quantity(self):
        """
        Gets the quantity of this KitComponent.


        :return: The quantity of this KitComponent.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this KitComponent.


        :param quantity: The quantity of this KitComponent.
        :type: int
        """
        self._quantity = quantity

    @property
    def instructions(self):
        """
        Gets the instructions of this KitComponent.


        :return: The instructions of this KitComponent.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """
        Sets the instructions of this KitComponent.


        :param instructions: The instructions of this KitComponent.
        :type: str
        """
        self._instructions = instructions

    @property
    def additional_services(self):
        """
        Gets the additional_services of this KitComponent.


        :return: The additional_services of this KitComponent.
        :rtype: str
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """
        Sets the additional_services of this KitComponent.


        :param additional_services: The additional_services of this KitComponent.
        :type: str
        """
        self._additional_services = additional_services

    @property
    def critical(self):
        """
        Gets the critical of this KitComponent.


        :return: The critical of this KitComponent.
        :rtype: str
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """
        Sets the critical of this KitComponent.


        :param critical: The critical of this KitComponent.
        :type: str
        """
        self._critical = critical

    @property
    def custom_fields(self):
        """
        Gets the custom_fields of this KitComponent.


        :return: The custom_fields of this KitComponent.
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """
        Sets the custom_fields of this KitComponent.


        :param custom_fields: The custom_fields of this KitComponent.
        :type: dict(str, object)
        """
        self._custom_fields = custom_fields

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

